"use client";
import { useState, useEffect } from "react";
import cutegif_01 from "./assets/CUTEGIF_01.gif";
import cutegif_02 from "./assets/CUTEGIF_02.gif";
import cutegif_03 from "./assets/CUTEGIF_03.gif";
import cutegif_04 from "./assets/CUTEGIF_04.gif";
import cutegif_05 from "./assets/CUTEGIF_05.gif";
import cutegif_06 from "./assets/CUTEGIF_06.gif";
import cutegif_07 from "./assets/CUTEGIF_07.gif";
import cutegif_08 from "./assets/CUTEGIF_08.gif";
import cutegif_09 from "./assets/CUTEGIF_09.gif";
import cutegif_10 from "./assets/CUTEGIF_10.gif";
import cutegif_11 from "./assets/CUTEGIF_11.gif";
import cutegif_12 from "./assets/CUTEGIF_12.gif";



export default function Page() {
  const [noCount, setNoCount] = useState(0);
  const [yesPressed, setYesPressed] = useState(false);
  const [currentGifIndex, setCurrentGifIndex] = useState(0);
  const [gifsLoaded, setGifsLoaded] = useState(false);
  const yesButtonSize = noCount * 20 + 16;

  const waitingGifs = [
    cutegif_01,
    cutegif_02,
    cutegif_03,
    cutegif_04,
    cutegif_05,
    cutegif_06,
    cutegif_07,
    cutegif_08,
    cutegif_09,
    cutegif_10,
    cutegif_11,
    cutegif_12,
    "https://media.tenor.com/rPAM20SrLsAAAAAM/picoozi-cute-cat.gif",
    "https://media.tenor.com/mMdUSERZgGUAAAAM/kiss-love.gif",
    "https://media.tenor.com/UIOgr3Zw97sAAAAM/cute.gif",
    "https://media.tenor.com/J9mOaXMbKygAAAAM/mochi-pet.gif",
    "https://media.tenor.com/D75xzWpkx30AAAAM/why-hello.gif",
    "https://media.tenor.com/aGiJKEun9CYAAAAj/wow-excited.gif",
    "https://media.tenor.com/PLQ-msOeeLUAAAAj/dudu-on-top-bubu-hearts.gif",
    "https://media.tenor.com/WC1PVy3eXeQAAAAj/dudu-playing-with-ball-happy.gif",
    "https://media.tenor.com/qKvWT2UBPCIAAAAM/peach-and-goma-temper-tantrum.gif",
  ];

  useEffect(() => {
    const preloadGifs = async () => {
      const loadPromises = waitingGifs.map((gif) => {
        return new Promise((resolve) => {
          const img = new Image();
          img.onload = () => resolve();
          img.src = gif;
        });
      });

      const successGif = new Image();
      successGif.src = "https://media.tenor.com/gUiu1zyxfzYAAAAi/bear-kiss-bear-kisses.gif";
      loadPromises.push(new Promise((resolve) => {
        successGif.onload = () => resolve();
      }));

      await Promise.all(loadPromises);
      setGifsLoaded(true);
    };

    preloadGifs();
  }, []);

  const handleNoClick = () => {
    setNoCount(noCount + 1);
    setCurrentGifIndex((prevIndex) => (prevIndex + 1) % waitingGifs.length);
  };

  const getNoButtonText = () => {
    const phrases = [
      "–ù–µ—Ç",
      "–¢—ã —É–≤–µ—Ä–µ–Ω(–∞)?",
      "–ê –µ—Å–ª–∏ —è –ø–æ–ø—Ä–æ—à—É –æ—á–µ–Ω—å –≤–µ–∂–ª–∏–≤–æ?",
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞",
      "–° —à–æ–∫–æ–ª–∞–¥–∫–æ–π –≤ –ø—Ä–∏–¥–∞—á—É",
      "–ê –µ—Å–ª–∏ –ø–æ–¥–∞—Ä—é –º–æ—Ä–æ–∂–µ–Ω–æ–µ?",
      "–ü–†–û–®–£ –¢–ï–ë–Ø, –°–û–õ–ù–´–®–ö–û",
      "–ù–æ :*(",
      "–Ø –Ω–µ –ø–µ—Ä–µ–∂–∏–≤—É –æ—Ç–∫–∞–∑",
      "–í—Å—ë, —è —É–º–∏—Ä–∞—é",
      "–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –ø—Ä–∏–∑—Ä–∞–∫–æ–º",
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ç—ë–Ω–æ–∫",
      ":((((",
      "–û–ß–ï–ù–¨ –ü–†–û–®–£",
      "–Ø —Ç–∞—é –æ—Ç –≥—Ä—É—Å—Ç–∏",
      "–ú–æ–∂–µ—Ç –≤—Å—ë-—Ç–∞–∫–∏ –¥–∞?",
      "–ù—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞-–ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
      "–¢—ã —Ä–∞–∑–±–∏–≤–∞–µ—à—å –º–Ω–µ —Å–µ—Ä–¥—Ü–µ",
      "–î–∞–∂–µ –∑–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–∞–¥–æ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è",
      "–Ø –Ω–µ —Å–¥–∞–º—Å—è!",
      "–¢–≤–æ—ë '–Ω–µ—Ç' –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —Å–∏–ª—å–Ω–µ–µ",
      "–Ø –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å –≤–µ—á–Ω–æ—Å—Ç—å",
      "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å?",
      "–Ø –ø—Ä–∏–Ω–µ—Å—É —Ç–µ–±–µ –ª—É–Ω—É —Å –Ω–µ–±–∞",
      "–í—Å–µ –∫–æ—Ç—è—Ç–∞ –º–∏—Ä–∞ –ø—Ä–æ—Å—è—Ç —Ç–µ–±—è —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è",
      "–ù–µ—Ç, —ç—Ç–æ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç :)",
      "–Ø –±—É–¥—É –¥–µ–ª–∞—Ç—å —Å —Ç–æ–±–æ–π –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è —Ç–≤–æ–∏—Ö —Ç–∫",
      "–°—É–¥—å–±–∞ —Å–≤–µ–ª–∞ –Ω–∞—Å –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫",
      "–Ø –Ω–µ —Å–º–æ–≥—É –±–µ–∑ —Ç–µ–±—è",
      "–¢—ã –º–æ—ë —Å—á–∞—Å—Ç—å–µ",
      "–û–±–µ—â–∞—é –º–Ω–æ–≥–æ –æ–±–Ω–∏–º–∞—à–µ–∫",
      "–¢—ã —Ä–∞–∑–±–∏–≤–∞–µ—à—å –º–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ",
      "–Ø —É–∂–µ –∫—É–ø–∏–ª –Ω–∞–º –º–æ—Ä–æ–∂–µ–Ω–æ–µ",
      "–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è —Å –æ—Ç–∫–∞–∑–æ–º",
      "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–µ—á–µ–Ω—å–∫–∏!",
      "–ò —á–∞–π!",
      "–Ø –ø–æ–¥–∞—Ä—é —Ç–µ–±–µ –≤–µ—Å—å –º–∏—Ä",
      "–Ø —Å–¥–µ–ª–∞—é —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ",
      "–Ø –±—É–¥—É —á–∏—Å—Ç–∏—Ç—å —Ç–µ–±–µ –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∏",
      "–Ø –±—É–¥—É —Ç–µ–±—è —É—Ç–µ—à–∞—Ç—å",
      "–Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É –ª—é–±–∏—Ç—å —Ç–µ–±—è",
      "–¢—ã –º–æ—ë —Å—á–∞—Å—Ç—å–µ",
      "–õ—é–±–ª—é —Ç–µ–±—è",
    ];
    
    return phrases[Math.min(noCount, phrases.length - 1)];
  };

  if (!gifsLoaded) {
    return <div className="flex h-screen items-center justify-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="-mt-16 flex h-screen flex-col items-center justify-center">
      {yesPressed ? (
        <>
          <img src="https://media.tenor.com/gUiu1zyxfzYAAAAi/bear-kiss-bear-kisses.gif" />
          <div className="my-4 text-4xl font-bold">–£–†–ê–ê–ê–ê–ê!!! –Ø –ª—é–±–ª—é —Ç–µ–±—è, —Å–æ–ª–Ω—ã—à–∫–æ!!</div>
          <div className="my-4 text-4xl font-bold">–¢–´ –õ–£–ß–®–ê–Ø!!!‚ù§Ô∏è‚Äçüî•‚ù§Ô∏è‚Äçüî•‚ù§Ô∏è‚Äçüî•</div>
        </>
      ) : (
        <>
          <img
            className="h-[200px]"
            src={waitingGifs[currentGifIndex]}
          />
          <h1 className="my-4 text-4xl">–°–æ–ª–Ω—ã—à–∫–æ, —Ç—ã –±—É–¥–µ—à—å –º–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–æ–π?</h1>
          <div className="flex items-center">
            <button
              className={`mr-4 rounded bg-green-500 px-4 py-2 font-bold text-white hover:bg-green-700`}
              style={{ fontSize: yesButtonSize }}
              onClick={() => setYesPressed(true)}
            >
              –î–∞
            </button>
            <button
              onClick={handleNoClick}
              className=" rounded bg-red-500 px-4 py-2 font-bold text-white hover:bg-red-700"
            >
              {noCount === 0 ? "–ù–µ—Ç" : getNoButtonText()}
            </button>
          </div>
        </>
      )}
    </div>
  );
}

